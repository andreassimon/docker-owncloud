owncloud:
  # build: .
  image: webwurst/owncloud
  expose:
    - "80"
  environment:
    SERVICE_NAME: owncloud
    SERVICE_TAGS: owncloud
    # ETCDCTL_PEERS: http://etcd:4001
  volumes:
    - docker_volumes/data:/var/www/html/data
#   - docker_volumes/config:/var/www/html/config
  links:
    - mysql
    - etcd

mysql:
  image: mysql
  expose:
    - "3306"
  environment:
    MYSQL_DATABASE: owncloud
    MYSQL_USER: owncloud
    MYSQL_PASSWORD: password
    MYSQL_ROOT_PASSWORD: BFPTkyq8IRfP-random
    # MYSQLD_ARGS:
    SERVICE_NAME: mysql
    SERVICE_TAGS: db
  volumes:
    - docker_volumes/mysql:/var/lib/mysql

haproxy:
  image: webwurst/haproxy-confd
  ports:
    - "443:443"
    - "80:80"
  environment:
    SSL_CERT:
  links:
    - owncloud
    - etcd

registrator:
  image: progrium/registrator
  volumes:
    - /var/run/docker.sock:/tmp/docker.sock
  command: -internal=true etcd://etcd:4001/services
  links:
    - etcd

etcd:
  image: coreos/etcd
  name: etcd
  ports:
    - "4001:4001"
    - "7001:7001"
  # command: -discovery https://discovery.etcd.io/83954b801d881e773cf6746ec288b4cb -addr etcd:4001
  command: -addr etcd:4001

# $ fig run haproxy bash
# $ curl http://etcd:4001/v2/keys/

# $ curl -XPUT http://etcd:4001/v2/keys/owncloud -d dir=true
# $ curl -XPUT http://etcd:4001/v2/keys/owncloud/`hostname -s` -d dir=true
# $ curl -XPUT http://etcd:4001/v2/keys/owncloud/`hostname -s`/ip -d value=`hostname -i`

# $ curl http://etcd:4001/v2/keys/owncloud


# $ sudo make-ssl-cert generate-default-snakeoil
# $ sudo make-ssl-cert generate-default-snakeoil --force-overwrite
# $ less /usr/sbin/make-ssl-cert
#
# /etc/ssl/certs/ssl-cert-snakeoil.pem
# /etc/ssl/private/ssl-cert-snakeoil.key

# bash$
#   sudo bash -c 'SSL_CERT="`cat /etc/ssl/certs/ssl-cert-snakeoil.pem`\n`cat /etc/ssl/private/ssl-cert-snakeoil.key`" fig up'
